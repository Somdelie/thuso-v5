generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserType {
  NORMAL
  FREELANCER
}

model VendorProfile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                 String                 @unique
  name                  String
  phone                 String?
  country               String?
  state                 String?
  city                  String?
  address               String?
  image                 String?
  status                UserStatus             @default(ACTIVE)
  isAproved             Boolean                @default(false)
  isAdmin               Boolean                @default(false)
  role                  UserRole
  emailVerified         DateTime?
  about                 String?
  idType                String?
  idNumber              String?
  jobType               String?
  documentPhoto         String?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  accounts                Account[]
  vendorProfile           VendorProfile?
  twoFactorConfirmationId String?        @db.ObjectId
  jobs                    Job[] // Each user can have multiple jobs
  vendorProfileId         String?        @db.ObjectId
  proposals               Proposal[]
  Conversation            Conversation?  @relation(fields: [conversationId], references: [id])
  conversationId          String?        @db.ObjectId
}

// Address is an embedded document
type Address {
  street String
  city   String
  state  String
  zip    String
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum UserRole {
  User
  FREELANCER
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Job {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  type          String
  locationType  String
  location      String?
  country       String
  state         String
  city          String
  image         String?
  salary        String?
  isStarted     Boolean   @default(false)
  isFinished    Boolean   @default(false)
  startedDate   DateTime?
  endDate       DateTime?
  amountPaid    Int?
  amountClaimed Int?
  description   String
  approved      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  proposals Proposal[]

  authorEmail String? // Reference to the user who owns the job
  author      User?   @relation(fields: [authorEmail], references: [email])
}

model Proposal {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  isAccepted  Boolean @default(false)

  userName String?
  user     User?   @relation(fields: [userId], references: [id])

  Job    Job?    @relation(fields: [jobId], references: [id])
  jobId  String? @db.ObjectId
  userId String? @db.ObjectId
}

model Conversation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  participants User[] // List of users participating in the conversation
  adminId      String?   @db.ObjectId // Reference to the admin (if applicable)
  messages     Message[] // List of messages in the conversation
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  senderId       String       @db.ObjectId // Reference to the sender (user or admin)
  recipientId    String?      @db.ObjectId // Reference to the recipient (user or admin)
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId // Reference to the conversation this message belongs to
  createdAt      DateTime     @default(now())
}
